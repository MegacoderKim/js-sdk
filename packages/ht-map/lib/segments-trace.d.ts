import { HtMapItems } from "./map-items";
import { TimelineSegment } from "./timeline-segment";
import { HtCurrentUser } from "./current-user";
import { IAction, ISegment, IUserData } from "ht-models";
import { HtMapType } from "./interfaces";
export declare class HtSegmentsTrace {
    segmentsPolylines: any;
    stopMarkers: any;
    actionMarkers: any;
    actionsPolylines: any;
    timelineSegment: TimelineSegment;
    userMarker: HtCurrentUser;
    replayMarker: any;
    eventMarkers: HtMapItems;
    allowedEvents: {};
    map: any;
    constructor(mapType?: HtMapType);
    protected initBaseItems(mapType: HtMapType): void;
    initItems(mapType: any): void;
    trace(user: any, map: any, params?: {}): void;
    highlightAll(toHighlight: any): void;
    extendBounds(bounds: any): any;
    selectSegment(segment: ISegment): void;
    unselectSegment(segment: ISegment): void;
    selectSegmentEffect(segment: any): void;
    unselectSegmentEffect(segment: any): void;
    traceAction(user: IUserData, map: any): void;
    traceActionPolyline(user: any, map: any, currentPosition: any): void;
    getActionPolylineWithId(currentPosition: any, items: IAction[]): any;
    selectAction(actionId: string): void;
    protected getSegmentTypes(userSegments: ISegment[]): any;
    traceCurrentUser(segment: any, map: any): void;
    clearTimeline(): void;
    readonly stats: any;
    updateTimeline(user: IUserData): void;
    getCurrentUserPosition(): void;
    focusUserMarker(map: any): void;
    setSegmentPlayCallback(cb: any): void;
    setReplayHead(head: any, map: any): void;
    private traceEvents(user, map);
}
